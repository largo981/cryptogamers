### Что мы делаем

Чат бот в телеграм с использованием web app api телеграмма и mini app.

### Основные компоненты и файлы:

1. **Основной файл бота `cryptogamers.py`:**
   - **Функции:**
     - Инициализация и запуск бота через Telegram API с использованием `Application` (вместо `Updater`).
     - Подключение и работа с базами данных через модуль `db_manager.py`.
     - Регистрация пользователей с проверкой на уникальность `user_id` и обновление их данных.
     - Обработка команд `/start`, `/menu`, `/balance`, `/random_game`.
     - Взаимодействие с конфигурацией в `bio.json`.
     - Импорт и вызов функций из `referral_system.py` для управления реферальной системой.

2. **Файл `db_manager.py`:**
   - **Функции:**
     - Управление подключениями к базам данных `user.db` и `game.db`.
     - Регистрация и обновление данных пользователей с проверкой уникальности `user_id`.
     - Получение информации о пользователе и игре.
     - Обработка запросов к базе данных для получения случайной игры.

3. **Файл `webhook.py`:**
   - **Функции:**
     - Веб-сервер на Flask для обработки запросов Telegram через веб-хуки.
     - Получение и обработка обновлений из Telegram.
     - Взаимодействие с ботом для обработки событий.

4. **Файл `starter.py`:**
   - **Функции:**
     - Скрипт для запуска всех необходимых процессов проекта.
     - Запуск основного бота.
     - Запуск веб-сервера для веб-хуков.
     - Запуск проверки баз данных.

5. **Файл `dbchecker.py`:**
   - **Функции:**
     - Проверка и создание баз данных `user.db` и `game.db`, если они отсутствуют.

6. **База данных пользователей `user.db`:**
   - **Структура:**
     - `user_id`: Уникальный Telegram ID пользователя.
     - `user_name`: Имя пользователя.
     - `user_referal`: ID пользователя, который пригласил текущего пользователя.
     - `referal_id`: JSON-список ID пользователей, которых пригласил текущий пользователь.
     - `user_balance`: Баланс пользователя в формате `0.00000000`.
     - `user_device`: Тип устройства (iOS/Android).
     - `user_install`: Установлено приложение или нет (`yes/no`).
     - `user_language`: Язык пользователя, определенный через Telegram API.

7. **База данных игр `game.db`:**
   - **Структура:**
     - `game_id`: Уникальный идентификатор игры.
     - `game_name`: Название игры.
     - `game_url`: Ссылка на игру для вставки в `iframe`.
     - `game_category`: Категория игры.
     - `game_tag`: Тэги игры.
     - `game_description`: Описание игры.
     - `game_image_base64`: Картинка игры в формате Base64.

8. **Файл локализации `messages.json`:**
   - **Функции:**
     - Хранение текстов сообщений бота и их переводов на различные языки.
     - Обеспечение многоязычной поддержки в зависимости от языка пользователя.

9. **HTML-файлы игр в папке `/games/`:**
   - **Функции:**
     - Загружают нужную игру в `iframe` по ссылке из базы данных `game.db`.
     - Скрипт на странице отслеживает время, проведенное в игре, и отправляет данные на сервер для начисления криптовалюты.
     - Передача параметров `user_id` и `game_id` через URL.

10. **Конфигурационный файл `bio.json`:**
   - **Функции:**
     - Хранение актуального токена бота, адреса веб-сервера и страницы `game.html`.

### Дополнительные функции и файлы для MVP:

1. **Файл `referral_system.py`:**
   - Управление логикой реферальной системы.

2. **Изменения в `cryptogamers.py`:**
   - Импорт функций реферальной системы и взаимодействие с ними.

### План для следующих шагов:

1. **Тестирование и отладка**:
   - Провести полное тестирование всех функций бота и устранить возможные ошибки.
   - Убедиться в корректности работы реферальной системы и системы начисления баланса.

2. **Оптимизация производительности**:
   - Рассмотреть возможность оптимизации запросов к базе данных для повышения производительности.
   - Оценить необходимость использования более мощного движка базы данных (например, PostgreSQL) в будущем.

3. **Улучшение безопасности**:
   - Для MVP версии безопасность не приоритетна.

4. **Расширение функциональности**:
   - Рассмотреть добавление новых команд и возможностей в бота на основе пользовательских запросов.
   - Внедрить систему аналитики для отслеживания активности пользователей и игр.


## Описание экранов и взаимодействий
### Приветственное сообщение:
- Для всех пользователей, которые запускают бота.
- Описание возможностей для игроков: заработок криптовалюты во время игр.
- Кнопки меню: 'Случайная игра' и 'Мой баланс'. (Меню должно появится сразу и кнопки быть под полем ввода текста. Кнопка меню всегда должна присуствовать в чате)
- В Telegram всегда отображается кнопка открытия меню.

### Случайная игра:
- Выбирается случайная игра из базы данных `game.db`.
- Отображаются:
  - Название игры (жирным шрифтом).
  - Хэштеги: #категория, #тэги.
  - Описание игры.
  - Изображение игры (Base64).
- Кнопки:
  - **Играть**: Открывает мини-приложение `game.html`.
  - **Другая игра**: Показывает другую случайную игру.

### Игра через `game.html`:
- При загрузке страницы `game.html` передаются параметры `user_id` и `game_id` в URL.
- В зависимости от `game_id`, скрипт на странице подставляет нужную ссылку из базы данных `game.db` в `iframe` для загрузки игры.
- В процессе игры каждые 5 секунд показывается сообщение о заработке, текущем балансе и лимите.
- Кнопка в чате 'Повысить лимит' с предложением пригласить друга для увеличения лимита.

### Кнопка 'Пригласить друзей':
- Открывает функцию отправки сообщения в Telegram.
- Сообщение содержит информацию о заработке, приглашение играть и ссылку для начала игры.


## Проблемы и незавершенные задачи
1. **Кнопки меню не отобразились**:
   - Попытки создать кнопки с использованием ReplyKeyboardMarkup и InlineKeyboardMarkup не дали результата.
   - Необходимо провести дополнительное исследование и тестирование, чтобы выяснить, почему кнопки не отображаются.
   - Проверить правильность вызова функций и параметры, используемые для отображения кнопок.
2. **Поддержка мультиязычности**:
   - Было выявлено несколько проблем с кодировкой при загрузке файла messages.json.
   - Кодировка UTF-8 была установлена для решения этой проблемы, но необходимо убедиться, что все тексты корректно загружаются и используются.
3. **Необходимость рефакторинга и оптимизации**:
   - Рассмотреть возможность рефакторинга кода для улучшения читаемости и поддержки.
   - Произвести оптимизацию производительности, особенно в части работы с базами данных.
